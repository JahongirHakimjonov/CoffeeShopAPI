version: "3"

vars:
  RUNNER:
    sh: 'echo {{ .RUNNER | default "uv run" }}'
  SOURCES: src tests
  SOURCES_ROOT: src

tasks:
  default:
    cmd:
      task: all

  init:
    desc: Initialize local environment
    env:
      ENV: local
    cmds:
      - "uv sync"
      - "docker compose up -d --wait postgres"
      - "docker compose down"

  run:
    desc: Run the application locally for development
    env:
      ENV: local
    cmds:
      - "docker compose up -d --wait postgres || true"
      - "{{.RUNNER}} alembic upgrade head"
      - "{{.RUNNER}} fastapi dev src/dev.py"

  build:
    desc: Build the application for production
    cmds:
      - "docker compose -f docker-compose.yml up -d --build"

  down:
    desc: Stop the application and remove containers
    cmds:
      - "docker compose -f docker-compose.yml down"
  
  makemigrations:
    desc: Create initial database migrations
    env:
      ENV: local
    cmds:
      - "docker compose exec web uv run alembic upgrade head"
      - "docker compose exec web uv run alembic revision --autogenerate -m 'Initial migration'"

  migrate:
    desc: Apply database migrations
    env:
      ENV: local
    cmds:
      - "docker compose exec web uv run alembic upgrade head"

  lint:
    desc: Lint python source files
    cmds:
      - "{{.RUNNER}} ruff check {{.SOURCES}}"
      - "{{.RUNNER}} ruff format --check --diff {{.SOURCES}}"

  format:
    desc: Format python source files
    aliases: [ "fmt" ]
    cmds:
      - "{{.RUNNER}} ruff format {{ .SOURCES }}"
      - "{{.RUNNER}} ruff check --fix {{.SOURCES}}"

  deptry:
    desc: Check used dependencies with deptry
    cmd: "{{.RUNNER}} deptry {{.SOURCES_ROOT}}"

  typecheck:
    desc: Perform type-checking
    cmd: "{{.RUNNER}} mypy {{.SOURCES_ROOT}}"

  test:
    env:
      ENV: test
    desc: Run tests
    cmds:
      - "docker compose up -d --wait postgres-test"
      - "ENV=test {{.RUNNER}} pytest -vv"

  test-ci:
    env:
      ENV: ci
    desc: Run tests
    cmd: "{{.RUNNER}} pytest"

  testcov:
    desc: Run tests and generate a coverage report
    cmds:
      - task: test
      - "{{.RUNNER}} coverage report -m"
      - "{{.RUNNER}} coverage xml"

  pre-commit:
    desc: Run pre-commit
    cmd: uvx pre-commit run

  all:
    desc: Run the standard set of checks performed in CI
    cmds:
      - task: format
      - task: deptry
      - task: typecheck
      - task: testcov
